package kr.or.ddit.adrs.controller;

import java.io.IOException;
import java.io.InputStream;
import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.adrs.service.AddressService;
import kr.or.ddit.adrs.service.AddressServiceImpl;
import kr.or.ddit.vo.AddressVO;

/**
 * 	/adrs/address (GET)	주소록 조회
 *	/adrs/address (POST)주소록 등록
 *	/adrs/address/23 (GET) 주소록 상세조회
 *	/adrs/address/23 (PUT) 주소록 수정
 *	/adrs/address/23 (DELETE) 주소록 삭제
 */
@Controller
@RequestMapping("/adrs/address")
public class AddressDataController{
	private AddressService service = new AddressServiceImpl();
	
	@GetMapping
	public String adrsList(Principal principal, HttpServletRequest req) {
		
		String uri= StringUtils.substringAfter(req.getRequestURI(), req.getContextPath());
		int lastIdx = uri.lastIndexOf("/");
		int uriLen = uri.length();
		int baseLen = "/adrs/address".length();
		boolean valid = lastIdx >= baseLen && lastIdx < uriLen - 1;
		System.out.printf("%s : %b\n", uri, valid);
		
		String memId = principal.getName();
		List<AddressVO> adrsList = service.retriveAddressList(memId);
		
		req.setAttribute("adrsList", adrsList);
		
		return "jsonView";
	}
	
    private ObjectMapper mapper = new ObjectMapper();
	
	private boolean validate(AddressVO vo, Map<String, String> errors) {
		boolean valid = true;
		if(StringUtils.isBlank(vo.getAdrsName())) {
			errors.put("adrsName", "이름 누락");
			valid = false;
		}
		if(StringUtils.isBlank(vo.getAdrsHp())) {
			errors.put("adrsHp", "휴대폰 번호 누락");
			valid = false;
		}
		return valid;
	}
	
	@PostMapping
	public String doPost(
		@RequestBody AddressVO vo
		, HttpServletRequest req
		, Principal principal
		, Model model
	) throws IOException{
		
		model.addAttribute("originalData", vo);
		
		vo.setMemId(principal.getName());
		
		Map<String, String> errors = new HashMap<>();
		model.addAttribute("errors", errors);
		boolean valid = validate(vo, errors);
		
		boolean success = false;
		String message = null;
		if(valid) {
			if(service.createAddress(vo)) {
				success = true;
			}else {
				message = "등록 실패";
			}
		}else {
			message = "필수파라미터 누락";
		}
		
		model.addAttribute("success", success);
		model.addAttribute("message", message);
		
		return "jsonView";
	}
	
	@DeleteMapping("{adrsNo}")
	public String doDelete(
		@PathVariable int adrsNo
		, Model model
	) throws ServletException, IOException {
		boolean success = service.removeAddress(adrsNo);
		model.addAttribute("success", success);
		if(!success) {
			model.addAttribute("message", "삭제 실패");
		}
		
		return "jsonView";
	}
}












